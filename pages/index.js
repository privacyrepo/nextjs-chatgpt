import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Inter } from "@next/font/google";
import {
  List,
  Row,
  Form,
  Input,
  Button,
  notification,
  Dropdown,
  Modal,
} from "antd";
import { DownOutlined } from "@ant-design/icons";
import { useChatGPT } from "@/hooks";
import styles from "@/styles/Home.module.css";

const inter = Inter({ subsets: ["latin"] });
const CHAT_HISTORY_STORAGE_NAME = "CHAT_HISTORY_STORAGE";

export default function Home() {
  const [api, contextHolder] = notification.useNotification();
  const [form] = Form.useForm();
  const [question, setQuestion] = useState("");
  const [loginCode, setLoginCode] = useState("");
  const [modal2Open, setModal2Open] = useState(false);
  const { reply, loading, error } = useChatGPT(question, loginCode, modal2Open);
  const [chatHistory, setChatHistory] = useState([]);

  useEffect(() => {
    const CHAT_HISTORY_STORAGE_DATA =
      localStorage.getItem(CHAT_HISTORY_STORAGE_NAME) || "[]";
    setChatHistory(JSON.parse(CHAT_HISTORY_STORAGE_DATA));
  }, []);

  useEffect(() => {
    if (reply) {
      let chatItem = {
        question,
        reply,
      };
      let newChatHistory = [...chatHistory, chatItem];
      api.success({
        message: question,
        duration: null,
        description: reply,
      });
      localStorage.setItem(
        CHAT_HISTORY_STORAGE_NAME,
        JSON.stringify(newChatHistory)
      );
      setChatHistory(newChatHistory);
      setQuestion("");
      form.resetFields();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [reply]);

  useEffect(() => {
    if (error) {
      api.error({
        message: "Error",
        duration: null,
        description: error.message,
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [error]);

  const clearChat = () => {
    if (typeof window !== "undefined") {
      localStorage.clear();
      location.reload();
    }
  };

  const onFinish = (values) => {
    if (!loginCode) {
      api.error({
        message: "Error",
        duration: null,
        description: "点击右上角登录后使用",
      });
      return;
    }
    values?.question && setQuestion(values.question);
  };

  const items = [
    {
      key: "1",
      label: <div onClick={() => setModal2Open(true)}>登陆</div>,
    },
    {
      key: "2",
      label: <div onClick={clearChat}>清空对话</div>,
      danger: true,
    },
  ];

  return (
    <>
      <Head>
        <title>King-AI ChatGPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.description}>
          <Image
            src="/vercel.svg"
            alt="Vercel Logo"
            className={styles.vercelLogo}
            width={100}
            height={24}
            priority
          />
          <Dropdown menu={{ items }}>
            <div className="w-24">
              King-AI <DownOutlined />
            </div>
          </Dropdown>
        </div>

        <div className={styles.center}>
          <List
            className="w-full overflow-auto max-h-[400px]"
            size="small"
            header={<div>聊天记录:</div>}
            bordered
            dataSource={chatHistory}
            renderItem={(item) => (
              <List.Item>
                <List.Item.Meta
                  title={`我: ${item.question}`}
                  description={<h2>ChatGPT: {item.reply}</h2>}
                />
              </List.Item>
            )}
          />
          <Form
            className="mt-[24px]"
            form={form}
            layout="horizontal"
            onFinish={onFinish}
          >
            <Form.Item
              name="question"
              rules={[
                {
                  required: true,
                  message: "请输入问题",
                },
              ]}
            >
              <Input.TextArea
                className="w-[500px]"
                placeholder="输入你的问题"
                size="large"
                autoSize
                allowClear
              />
            </Form.Item>
            <Form.Item>
              <Row justify="end">
                <Button type="primary" htmlType="submit" loading={loading}>
                  提交
                </Button>
              </Row>
            </Form.Item>
          </Form>
        </div>

        <div className={styles.grid}>
          <a
            href="#"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              打赏 <span>-&gt;</span>
            </h2>
            <p className={inter.className}>感谢支持</p>
          </a>

          <a
            href="https://chat.openai.com/"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              ChatGPT <span>-&gt;</span>
            </h2>
            <p className={inter.className}>官方直通车</p>
          </a>
        </div>
        {contextHolder}
        <Modal
          title="请输入登陆码："
          centered
          open={modal2Open}
          onOk={() => setModal2Open(false)}
          onCancel={() => setModal2Open(false)}
        >
          <Input
            placeholder="格式: XXX-XXX-XXX"
            onChange={(e) => setLoginCode(e.target.value)}
            value={loginCode}
          />
        </Modal>
      </main>
    </>
  );
}
